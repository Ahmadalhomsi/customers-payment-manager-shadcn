// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String  @id @default(cuid())
  username String  @unique
  name     String?
  password String
  active   Boolean @default(true)

  // Permissions
  canViewCustomers Boolean @default(false)
  canEditCustomers Boolean @default(false) // edit or add or delete
  canViewServices  Boolean @default(false) // or edit reminders
  canEditServices  Boolean @default(false)
  canViewReminders Boolean @default(false)
  canEditReminders Boolean @default(false)
  canViewAdmins    Boolean @default(false)
  canEditAdmins    Boolean @default(false)
  canSeePasswords  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        String  @id @default(cuid())
  name      String
  tableName String?
  email     String?
  phone     String?
  password  String

  // Relations
  services Service[] @relation("CustomerToService")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Indexes for better search performance
  @@index([name])
  @@index([email])
  @@index([phone])
  @@index([createdAt])
}

model Service {
  id          String  @id @default(cuid())
  name        String
  description String?
  companyName String?
  category    String  @default("Adisyon ProgramÄ±")
  paymentType String  @default("custom") // Monthly, Yearly
  periodPrice Float?
  currency    String  @default("TL")
  active      Boolean @default(true)

  startingDate DateTime @default(now())
  endingDate   DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + INTERVAL '1 year')"))
  // paid         Boolean  @default(false)
  deviceToken String?
  terminal    String? // Device name

  // Relations
  customerID     String
  customer       Customer       @relation("CustomerToService", fields: [customerID], references: [id], onDelete: Cascade)
  reminders      Reminder[]
  RenewalHistory RenewHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Indexes for better search and filtering performance
  @@index([name])
  @@index([category])
  @@index([companyName])
  @@index([customerID])
  @@index([active])
  @@index([startingDate])
  @@index([endingDate])
  @@index([createdAt])
  @@index([paymentType])
  // Composite indexes for common query patterns
  @@index([customerID, active])
  @@index([category, active])
  @@index([startingDate, endingDate])
}

model Reminder {
  id          String         @id @default(cuid())
  scheduledAt DateTime
  status      ReminderStatus @default(SCHEDULED)

  message   String?
  // Relations
  serviceID String
  service   Service @relation(fields: [serviceID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReminderStatus {
  SCHEDULED
  SENT
  CANCELED
  FAILED
}

model FailedLoginAttempt {
  id           String    @id @default(cuid())
  ipAddress    String    @unique
  attempts     Int       @default(0)
  lastAttempt  DateTime  @updatedAt
  blockedUntil DateTime? // Optional: If blocked, until when it's blocked
}

// title: "Payment Reminder",
// description: "Customer XYZ has an upcoming payment",
// type: "alert",
// author: "System",
// date: new Date("2024-03-15"),

model Notifications {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String   @default("info")
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model RenewHistory {
  id              String   @id @default(cuid())
  name            String
  type            String
  previousEndDate DateTime // Service's ending date before renewal
  newEndDate      DateTime // New ending date after renewal

  // Relations
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiLog {
  id        String   @id @default(cuid())
  endpoint  String   // The API endpoint that was called
  method    String   // HTTP method (GET, POST, etc.)
  ipAddress String   // IP address of the request
  userAgent String?  // User agent of the request
  requestBody String? // JSON string of request body
  responseStatus Int  // HTTP response status code
  responseBody String? // JSON string of response body
  serviceName String? // Service name if available
  deviceToken String? // Device token if available
  validationType String? // Type of validation: 'Main' or 'Trial'
  
  createdAt DateTime @default(now())
  
  // Indexes for better performance on large datasets
  @@index([createdAt])
  @@index([ipAddress])
  @@index([serviceName])
  @@index([validationType])
  @@index([responseStatus])
}
